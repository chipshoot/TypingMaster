<style>
    .center-content {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%; /* Adjust as needed */
    }
</style>
<Card>
    <HeaderTemplate>
        <div>Beginner's Typing Training Schedule Setup Wizard</div>
    </HeaderTemplate>
    <BodyTemplate>
        <Step @ref="@_step">
            <StepItem Title="Set Your Typing Goals">
                <div class="center-content">
                    <BeginnerWizard_Step1 OnTargetStatsChanged="HandleTargetStatsChanged"></BeginnerWizard_Step1>
                </div>
            </StepItem>
            <StepItem Title="Set Your Weekly Practice Time Goal">
                <div class="center-content">
                    <BeginnerWizard_Step2 OnTargetTimeChanged="HandleTargetTimeChanged"></BeginnerWizard_Step2>
                </div>
            </StepItem>
            <StepItem Title="Your course is ready!">
                <div class="center-content">
                    <BeginnerWizard_Step4 SettingResult="@_courseSetting"></BeginnerWizard_Step4>
                </div>
            </StepItem>
        </Step>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="Color.Primary" OnClick="()=>PrevStep(_step)" IsDisabled="@_isFirstStep">Back</Button>
        <Button Color="Color.Primary" OnClick="()=>NextStep(_step)" IsDisabled="@_isFinished">Next</Button>
        <Button Color="Color.Primary" OnClick="()=>Reset(_step)">Reset</Button>
    </FooterTemplate>
</Card>
@code
{
    private Step? _step;
    private bool _isFirstStep;
    private bool _isFinished;

    private CourseSetting _courseSetting = new()
        {
            Minutes = 210,
            NewKeysPerStep = 1,
            TargetStats = new StatsBase
            {
                Accuracy = 85,
                Wpm = 25
            },
            PracticeTextLength = 30
        };


    protected override void OnInitialized()
    {
        _step = new Step();
        _isFirstStep = true;
        _isFinished = false;
    }

    private void PrevStep(Step step)
    {
        step?.Prev();
        step.StepIndex = step.StepIndex == 0 ? 0 : step.StepIndex - 1;
        _isFirstStep = step?.StepIndex == 0;
        _isFinished = false;
    }

    private void NextStep(Step step)
    {
        step?.Next();
        step.StepIndex = step.StepIndex == 2 ? 2 : step.StepIndex + 1;
        _isFirstStep = false;
        _isFinished = step?.StepIndex == 2;
    }

    private void Reset(Step step)
    {
        step?.Reset();
        step.StepIndex = 0;
        _isFirstStep = true;
        _isFinished = false;
    }
    private void HandleTargetStatsChanged(StatsBase targetStats)
    {
        _courseSetting.TargetStats = targetStats;
    }

    private void HandleTargetTimeChanged(int minutes)
    {
        _courseSetting.Minutes = minutes;
    }

    private void HandleNewKeysChanged(int newKeys)
    {
        _courseSetting.NewKeysPerStep = newKeys;
    }
}
