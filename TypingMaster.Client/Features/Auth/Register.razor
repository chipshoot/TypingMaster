@page "/register"

@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IApiConfiguration ApiConfig
@inject ApplicationContext AppState
@inject ILogger Logger

<style>
    .register-container {
        max-width: 500px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
</style>

<div class="register-container">
    <h3 class="mb-4">Create Account</h3>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }

    <ValidateForm Model="@_registerModel" OnValidSubmit="@HandleRegister">
        <EditorForm Model="@_registerModel" LabelAlign="Alignment.Left" ItemsPerRow="1" ShowLabel="true">
            <FieldItems>
                <EditorItem @bind-Field="@context.AccountName">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Username" @bind-value="@value.AccountName"
                            ShowLabel="true" DisplayText="Username" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.Email">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Email" type="email" @bind-value="@value.Email"
                            ShowLabel="true" DisplayText="Email" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.Password">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Password" type="password"
                            @bind-value="@value.Password" ShowLabel="true" DisplayText="Password" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.ConfirmPassword">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Confirm Password" type="password"
                            @bind-value="@value.ConfirmPassword" ShowLabel="true" DisplayText="Confirm Password" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.FirstName">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="First Name (Optional)"
                            @bind-value="@value.FirstName" ShowLabel="true" DisplayText="First Name" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.LastName">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Last Name (Optional)" @bind-value="@value.LastName"
                            ShowLabel="true" DisplayText="Last Name" />
                    </EditTemplate>
                </EditorItem>
            </FieldItems>
            <Buttons>
                <Button ButtonType="ButtonType.Submit" class="btn btn-primary"
                    disabled="@(_isLoading)">Register</Button>
                <Button ButtonType="ButtonType.Button" class="btn btn-secondary" OnClick="@NavigateToLogin"
                    disabled="@(_isLoading)">Back to Login</Button>
            </Buttons>
        </EditorForm>
    </ValidateForm>
</div>

@code {
    private readonly RegisterRequest _registerModel = new();
    private bool _isLoading = false;
    private string? _errorMessage;

    private async Task HandleRegister(EditContext context)
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            // Call register API endpoint
            var registerUrl = ApiConfig.BuildApiUrl("api/auth/register");
            var response = await HttpClient.PostAsJsonAsync(registerUrl, _registerModel);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

                if (authResponse != null && authResponse.Success)
                {
                    // Set the current account in application state
                    AppState.IsLoggedIn = true;
                    AppState.CurrentAccount = new Account
                    {
                        Id = authResponse.AccountId,
                        AccountName = authResponse.AccountName ?? _registerModel.AccountName,
                        AccountEmail = _registerModel.Email,
                        User = new UserProfile
                        {
                            FirstName = _registerModel.FirstName,
                            LastName = _registerModel.LastName
                        }
                    };

                    // Navigate to home page or dashboard
                    Navigation.NavigateTo("/");
                }
                else
                {
                    _errorMessage = authResponse?.Message ?? "Registration failed. Please try again.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.Error($"Registration API error: {errorContent}");
                _errorMessage = "Registration failed. Please check your information and try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error during registration");
            _errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}