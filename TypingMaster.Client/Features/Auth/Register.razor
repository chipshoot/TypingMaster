@page "/register"

@inject NavigationManager Navigation
@inject IAuthWebService AuthService
@inject ILogger Logger

<div class="register-container">
    <div class="register-header">
        <h3>Create Account</h3>
        <p>Join us to start your typing journey</p>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="error-container">
            <div class="error-title">
                <i class="error-icon fas fa-exclamation-circle"></i>
                Registration Error
            </div>
            <p class="error-message">@_errorMessage</p>
        </div>
    }

    @if (_registrationSuccess)
    {
        <div class="success-container">
            <div class="success-title">
                <i class="success-icon fas fa-check-circle"></i>
                Registration Successful
            </div>
            <p class="success-message">
                Please check your email (@_registerModel.Email) for a confirmation code.
                Once confirmed, you can log in to your account.
            </p>
            <div class="resend-container">
                <p>Didn't receive the code?</p>
                <Button ButtonType="ButtonType.Button" class="btn btn-primary" OnClick="@ResendConfirmationCode"
                    disabled="@(_isLoading)">
                    Resend Confirmation Code
                </Button>
            </div>
            <Button ButtonType="ButtonType.Button" class="btn btn-login" OnClick="@NavigateToLogin">
                Back to Login
            </Button>
        </div>
    }
    else
    {
        <ValidateForm Model="@_registerModel" OnValidSubmit="@HandleRegister">
            <EditorForm Model="@_registerModel" LabelAlign="Alignment.Left" ItemsPerRow="1" ShowLabel="true">
                <FieldItems>
                    <EditorItem @bind-Field="@context.AccountName">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="Username" @bind-value="@value.AccountName"
                                ShowLabel="true" DisplayText="Username" />
                        </EditTemplate>
                    </EditorItem>
                    <EditorItem @bind-Field="@context.Email">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="Email" type="email" @bind-value="@value.Email"
                                ShowLabel="true" DisplayText="Email" />
                        </EditTemplate>
                    </EditorItem>
                    <EditorItem @bind-Field="@context.Password">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="Password" type="password"
                                @bind-value="@value.Password" ShowLabel="true" DisplayText="Password" />
                        </EditTemplate>
                    </EditorItem>
                    <EditorItem @bind-Field="@context.ConfirmPassword">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="Confirm Password" type="password"
                                @bind-value="@value.ConfirmPassword" ShowLabel="true" DisplayText="Confirm Password" />
                        </EditTemplate>
                    </EditorItem>
                    <EditorItem @bind-Field="@context.FirstName">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="First Name (Optional)"
                                @bind-value="@value.FirstName" ShowLabel="true" DisplayText="First Name" />
                        </EditTemplate>
                    </EditorItem>
                    <EditorItem @bind-Field="@context.LastName">
                        <EditTemplate Context="value">
                            <BootstrapInput TValue="string" PlaceHolder="Last Name (Optional)" @bind-value="@value.LastName"
                                ShowLabel="true" DisplayText="Last Name" />
                        </EditTemplate>
                    </EditorItem>
                </FieldItems>
                <Buttons>
                    <Button ButtonType="ButtonType.Submit" class="btn btn-primary btn-register" Icon="@_icon"
                        disabled="@(_isLoading)">
                        Register
                    </Button>
                    <Button ButtonType="ButtonType.Button" class="btn btn-login" OnClick="@NavigateToLogin"
                        disabled="@(_isLoading)">Back to Login</Button>
                </Buttons>
            </EditorForm>
        </ValidateForm>
    }
</div>

@code {
    private readonly RegisterRequest _registerModel = new();
    private bool _isLoading = false;
    private string? _errorMessage;
    private string _icon = "";
    private bool _registrationSuccess = false;

    private async Task HandleRegister(EditContext context)
    {
        SetLoading(true);
        _errorMessage = null;

        try
        {
            var response = await AuthService.RegisterAsync(_registerModel);

            if (response.Success)
            {
                // Navigate to confirmation page with the username
                Navigation.NavigateTo($"/confirm-registration?username={_registerModel.AccountName}");
            }
            else
            {
                Logger.Error($"Registration API error: {response.Message}");
                _errorMessage = response.Message ?? "Registration failed. Please check your information and try again.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error during registration");
            _errorMessage = "An unexpected error occurred. Please try again later.";
        }
        finally
        {
            SetLoading(false);
        }
    }

    private async Task ResendConfirmationCode()
    {
        SetLoading(true);
        _errorMessage = null;

        try
        {
            var success = await AuthService.ResendConfirmationCodeAsync(_registerModel.AccountName);
            if (success)
            {
                _errorMessage = "Confirmation code has been resent to your email.";
            }
            else
            {
                _errorMessage = "Failed to resend confirmation code. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error resending confirmation code");
            _errorMessage = "An unexpected error occurred while resending the confirmation code.";
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void SetLoading(bool isLoading)
    {
        _isLoading = isLoading;
        _icon = isLoading ? "fa-solid fa-spinner fa-spin fa-fw" : "";
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}