@page "/login"

@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ApplicationContext AppState
@inject ILogger Logger
@inject ICourseService CourseProvider
@inject IApiConfiguration ApiConfig

<style>
    .login-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
</style>

<div class="login-container">
    <ValidateForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
        <EditorForm Model="@_loginModel" LabelAlign="Alignment.Left" ItemsPerRow="1" ShowLabel="true">
            <FieldItems>
                <EditorItem @bind-Field="@context.Account">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Email" type="email" maxLength="254"
                            @bind-value="@value.Account" ShowLabel="true" DisplayText="Account" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.Password">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Password" type="password" maxlength="128"
                            @bind-value="@value.Password" ShowLabel="true" DisplayText="Password" />
                    </EditTemplate>
                </EditorItem>
            </FieldItems>
            <Buttons>
                <Button ButtonType="ButtonType.Submit" class="btn btn-primary" disabled="@(_isLoading)">Login</Button>
                <Button ButtonType="ButtonType.Button" class="btn btn-primary" disabled="@(_isLoading)"
                    OnClick="@NavigateToRegister">
                    Sign Up
                </Button>
            </Buttons>
        </EditorForm>
    </ValidateForm>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-3">@_errorMessage</div>
    }
</div>

@code {
    private readonly LoginModel _loginModel = new();
    private bool _isLoading = false;
    private string? _errorMessage;
    private string? _returnUrl;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            _returnUrl = returnUrl;
        }
    }

    private async Task HandleLogin(EditContext context)
    {
        _isLoading = true;
        _errorMessage = null;

        // Check if Account or Password is null or empty
        if (string.IsNullOrEmpty(_loginModel.Account))
        {
            _errorMessage = "Please enter your email address.";
            _isLoading = false;
            return;
        }

        if (string.IsNullOrEmpty(_loginModel.Password))
        {
            _errorMessage = "Please enter your password.";
            _isLoading = false;
            return;
        }

        try
        {
            // Use HttpClient to call auth API endpoint
            var loginRequest = new
            {
                Email = _loginModel.Account,
                Password = _loginModel.Password
            };

            var authUrl = ApiConfig.BuildApiUrl("api/auth/login");
            var response = await HttpClient.PostAsJsonAsync(authUrl, loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

                if (authResponse != null && authResponse.Success)
                {
                    // Set the account in application state
                    AppState.CurrentAccount = new Account
                    {
                        Id = authResponse.AccountId,
                        AccountEmail = _loginModel.Account
                    };

                    if (AppState.CurrentAccount != null)
                    {
                        // Load course information if available
                        if (AppState.CurrentAccount.CourseId != Guid.Empty)
                        {
                            AppState.CurrentCourse = await CourseProvider.GetCourse(AppState.CurrentAccount.CourseId);
                        }

                        AppState.IsLoggedIn = true;

                        Navigation.NavigateTo(!string.IsNullOrEmpty(_returnUrl) ? _returnUrl : "/");
                    }
                    else
                    {
                        Logger.Error("Cannot retrieve user information");
                        _errorMessage = "Error retrieving user information";
                    }
                }
                else
                {
                    _errorMessage = authResponse?.Message ?? "Invalid username or password.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.Error($"Auth API error: {errorContent}");
                _errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error during login");
            _errorMessage = "An error occurred during login.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Account email cannot be empty")]
        [StringLength(254, ErrorMessage = "The email address cannot exceed 254 characters.")]
        public string? Account { get; set; }

        [Required(ErrorMessage = "Password cannot be empty")]
        [StringLength(128, MinimumLength = 8, ErrorMessage = "The password must be between 8 and 128 characters.")]
        public string? Password { get; set; }
    }
}
