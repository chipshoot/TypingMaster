@page "/login"
@inject NavigationManager Navigation
@inject IAuthWebService AuthService
@inject ILogger Logger

<div class="login-container">
    <div class="login-header">
        <h3>Welcome Back</h3>
        <p>Enter your credentials to access your account</p>
    </div>

    <ValidateForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
        <EditorForm Model="@_loginModel" LabelAlign="Alignment.Left" ItemsPerRow="1" ShowLabel="true">
            <FieldItems>
                <EditorItem @bind-Field="@context.Account">
                    <EditTemplate Context="value">
                        <BootstrapInput @ref="_emailInput" TValue="string" PlaceHolder="youremail@example.com" type="email"
                            maxLength="254" @bind-value="@value.Account" ShowLabel="true" DisplayText="Email" />
                    </EditTemplate>
                </EditorItem>
                <EditorItem @bind-Field="@context.Password">
                    <EditTemplate Context="value">
                        <BootstrapInput TValue="string" PlaceHolder="Your password" type="password" maxlength="128"
                            @bind-value="@value.Password" ShowLabel="true" DisplayText="Password" />
                    </EditTemplate>
                </EditorItem>
            </FieldItems>
            <Buttons>
                <Button ButtonType="ButtonType.Submit" class="btn btn-primary btn-login" icon="@_icon" disabled="@(_isLoading)">
                    LogIn
                </Button>
                <Button ButtonType="ButtonType.Button" class="btn btn-outline-secondary btn-register" disabled="@(_isLoading)"
                    OnClick="@NavigateToRegister">
                    Sign Up
                </Button>
            </Buttons>
        </EditorForm>
    </ValidateForm>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="error-container">
            <div class="d-flex align-items-center">
                <i class="fa fa-exclamation-circle error-icon"></i>
                <div>
                    <div class="error-title">Login Failed</div>
                    <p class="error-message">@_errorMessage</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private readonly LoginModel _loginModel = new();
    private bool _isLoading;
    private string? _errorMessage;
    private string? _returnUrl;
    private BootstrapInput<string>? _emailInput;
    private string _icon = "";

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            _returnUrl = returnUrl;
        }

        await Task.Delay(100); // Small delay to ensure the component is fully rendered
        if (_emailInput != null)
        {
            await _emailInput.FocusAsync();
        }
    }

    private async Task HandleLogin(EditContext context)
    {
        SetLoading(true);
        _errorMessage = null;

        // Check if Account or Password is null or empty
        if (string.IsNullOrEmpty(_loginModel.Account))
        {
            _errorMessage = "Please enter your email address.";
            SetLoading(false);
            return;
        }

        if (string.IsNullOrEmpty(_loginModel.Password))
        {
            _errorMessage = "Please enter your password.";
            SetLoading(false);
            return;
        }

        try
        {
            var authResponse = await AuthService.LoginAsync(_loginModel.Account, _loginModel.Password);
            if (authResponse.Success)
            {
                Navigation.NavigateTo(!string.IsNullOrEmpty(_returnUrl) ? _returnUrl : "/");
            }
            else
            {
                Logger.Error($"Auth API error: {authResponse.Message}");
                
                // Use the specific error message from the server when available
                _errorMessage = string.IsNullOrEmpty(authResponse.Message) 
                    ? "Login failed. Please check your credentials." 
                    : authResponse.Message;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error during login");
            _errorMessage = "An unexpected error occurred. Please try again later or contact support.";
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private void SetLoading(bool isLoading)
    {
        _isLoading = isLoading;
        _icon = isLoading ? "fa-solid fa-spinner fa-spin fa-fw" : "";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Account email cannot be empty")]
        [StringLength(254, ErrorMessage = "The email address cannot exceed 254 characters.")]
        public string? Account { get; set; }

        [Required(ErrorMessage = "Password cannot be empty")]
        [StringLength(128, MinimumLength = 8, ErrorMessage = "The password must be between 8 and 128 characters.")]
        public string? Password { get; set; }
    }
}
