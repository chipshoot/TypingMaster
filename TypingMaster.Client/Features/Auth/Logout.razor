@page "/logout"
@inject NavigationManager Navigation
@inject IAuthWebService AuthService
@inject ApplicationContext AppState
@inject ILogger Logger

@code
{
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AppState?.CurrentAccount == null)
            {
                Logger.Error("Error during logout");
                _errorMessage = "No account found in current environment.";
                Navigation.NavigateTo("/");
                return;
            }

            var response = await AuthService.LogoutAsync(AppState.CurrentAccount.Id, AppState.RefreshToken);

            if (response.Success)
            {
                // Clear application state
                AppState.ClearContext();

                // Navigate to login page
                Navigation.NavigateTo("/login");
            }
            else
            {
                Logger.Error($"Logout failed with status code: {response.StatusCode}");
                _errorMessage = "Failed to logout. Please try again.";
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "Error during logout");
            _errorMessage = "An error occurred during logout.";
            Navigation.NavigateTo("/");
        }
    }
}