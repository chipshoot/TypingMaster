@inject ILogger Logger;

@code {



    private KeyboardEventArgs? _previousKeyEventArgs;
    private Queue<KeyEvent> _keyEvents = new();
    public KeyEvent? KeyEvent { get; set; }
    private HashSet<string> _processedEventIds = [];
    private Dictionary<string, KeyEvent> _pendingKeyEvents = new();

    [Parameter]
    public EventCallback<Queue<KeyEvent>> OnKeyEventGenerated { get; set; }

    [Parameter]
    public KeyboardEventArgs? KeyEventArgs { get; set; }

    [Parameter]
    public char CharExpected { get; set; }


    protected override void OnParametersSet()
    {
        if (KeyEventArgs != null && (_previousKeyEventArgs == null || !KeyEventArgs.Equals(_previousKeyEventArgs)))
        {
            HandleKeyEvent(KeyEventArgs);
            _previousKeyEventArgs = KeyEventArgs;
        }
    }

    public void HandleKeyEvent(KeyboardEventArgs e)
    {
        switch (e.Type)
        {
            case "keydown":
                HandleKeyDown(e);
                break;
            case "keyup":
                HandleKeyUp(e);
                break;
        }
    }

    public void Reset()
    {
        KeyEvent = null;
        _keyEvents.Clear();
        _processedEventIds.Clear();
        _pendingKeyEvents.Clear();
    }

    private string GetEventKey(KeyboardEventArgs e)
    {
        // Generate consistent event key for both KeyDown and KeyUp using just the Code
        // This ensures we match keyup/keydown pairs regardless of Shift state
        return e.Code;
    }

    public void HandleKeyDown(KeyboardEventArgs e)
    {
        Logger.Debug($"Raw KeyDown Event - Key: {e.Key}, Code: {e.Code}, ShiftKey: {e.ShiftKey}");
        float latency = 0;

        var keyDownTime = DateTime.Now;
        if (_keyEvents.Count > 0)
        {
            latency = (float)(keyDownTime - _keyEvents.Last().KeyUpTime).TotalMilliseconds;
        }

        var charExpected = CharExpected;
        var eventKey = GetEventKey(e);

        // Handle the typed key correctly
        char typedKey;
        if (e.Key.Length == 1)
        {
            typedKey = e.Key[0];
        }
        else if (e.Code.StartsWith("Key"))
        {
            // Handle letter keys with shift key for capitals
            var baseChar = e.Code[3].ToString().ToLower()[0];
            typedKey = e.ShiftKey ? char.ToUpper(baseChar) : baseChar;
        }
        else if (e.Code == "Space")
        {
            typedKey = ' ';
        }
        else if (e.Code.StartsWith("Digit"))
        {
            // Handle number keys
            typedKey = e.ShiftKey ? GetShiftedDigit(e.Code[5]) : e.Code[5];
        }
        else
        {
            // For other special keys, use the first character of the key if available
            typedKey = e.Key.Length > 0 ? e.Key[0] : '\0';
        }

        KeyEvent = new KeyEvent
        {
            Key = charExpected,
            TypedKey = typedKey,
            IsCorrect = typedKey == charExpected,
            KeyDownTime = keyDownTime,
            Latency = latency
        };

        _pendingKeyEvents[eventKey] = KeyEvent;
        Logger.Debug($"KeyDown: {JsonSerializer.Serialize(KeyEvent)}");
    }

    private char GetShiftedDigit(char digit)
    {
        return digit switch
        {
            '1' => '!',
            '2' => '@',
            '3' => '#',
            '4' => '$',
            '5' => '%',
            '6' => '^',
            '7' => '&',
            '8' => '*',
            '9' => '(',
            '0' => ')',
            _ => digit
        };
    }

    public void HandleKeyUp(KeyboardEventArgs e)
    {
        Logger.Debug($"Raw KeyUp Event - Key: {e.Key}, Code: {e.Code}, ShiftKey: {e.ShiftKey}");
        var eventKey = GetEventKey(e);
        if (_pendingKeyEvents.TryGetValue(eventKey, out var pendingEvent))
        {
            // Generate a unique EventId using event-specific data
            var eventId = $"{Guid.NewGuid()}_{pendingEvent.Key}_{pendingEvent.KeyDownTime.Ticks}_{DateTime.Now.Ticks}";
            if (!_processedEventIds.Add(eventId))
            {
                return;
            }

            pendingEvent.KeyUpTime = DateTime.Now;
            _keyEvents.Enqueue(pendingEvent);
            _pendingKeyEvents.Remove(eventKey);

            Logger.Debug($"KeyUp: {JsonSerializer.Serialize(pendingEvent)}");
            Logger.Debug($"KeyEventIds: {JsonSerializer.Serialize(_processedEventIds)}");
            OnKeyEventGenerated.InvokeAsync(_keyEvents);
        }
    }

    public Queue<KeyEvent> GetKeyEvents()
    {
        return _keyEvents;
    }
}