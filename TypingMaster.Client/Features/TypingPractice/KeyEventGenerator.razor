@code {

    private KeyboardEventArgs? _previousKeyEventArgs;
    private Queue<KeyEvent> _keyEvents = new();
    public KeyEvent? KeyEvent { get; set; }
    private HashSet<string> _processedEventIds = [];

    [Parameter]
    public EventCallback<Queue<KeyEvent>> OnKeyEventGenerated { get; set; }

    [Parameter]
    public KeyboardEventArgs? KeyEventArgs { get; set; }

    [Parameter]
    public char CharExpected { get; set; }


    protected override void OnParametersSet()
    {
        if (KeyEventArgs != null && (_previousKeyEventArgs == null || !KeyEventArgs.Equals(_previousKeyEventArgs)))
        {
            HandleKeyEvent(KeyEventArgs);
            _previousKeyEventArgs = KeyEventArgs;
        }
    }

    public void HandleKeyEvent(KeyboardEventArgs e)
    {
        switch (e.Type)
        {
            case "keydown":
                HandleKeyDown(e);
                break;
            case "keyup":
                HandleKeyUp(e);
                break;
        }
    }

    public void Reset()
    {
        KeyEvent = null;
        _keyEvents.Clear();
        _processedEventIds.Clear();
    }

    public void HandleKeyDown(KeyboardEventArgs e)
    {
        float latency = 0;

        var keyDownTime = DateTime.Now;
        if (_keyEvents.Count > 0)
        {
            latency = (float)(keyDownTime - _keyEvents.Last().KeyUpTime).TotalMilliseconds;
        }

        var charExpected = CharExpected;

        KeyEvent = new KeyEvent
        {
            Key = charExpected,
            TypedKey = e.Key[0],
            IsCorrect = e.Key[0] == charExpected,
            KeyDownTime = keyDownTime,
            Latency = latency
        };
    }

    public void HandleKeyUp(KeyboardEventArgs e)
    {
        if (KeyEvent != null)
        {
            // Generate a unique EventId
            var eventId = $"{KeyEvent.Key}_{KeyEvent.TypedKey}_{KeyEvent.KeyDownTime}_{DateTime.Now}";
            if (!_processedEventIds.Add(eventId))
            {
                return;
            }

            KeyEvent.KeyUpTime = DateTime.Now;
            _keyEvents.Enqueue(KeyEvent);
            OnKeyEventGenerated.InvokeAsync(_keyEvents);
        }
    }

    public Queue<KeyEvent> GetKeyEvents()
    {
        return _keyEvents;
    }
}