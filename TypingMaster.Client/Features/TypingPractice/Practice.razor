@page "/typing-practice"

<h3>Typing Practice</h3>
<style>
    .w-full {
        width: 100%;
    }

    .h-full {
        height: 100%;
    }

    .space-y-2 > :not([hidden]) ~ :not([hidden]) {
        --tw-space-y-reverse: 0;
        margin-top: calc(.5rem * calc(1 - var(--tw-space-y-reverse)));
        margin-bottom: calc(.5rem * var(--tw-space-y-reverse))
    }

    .justify-between {
        justify-content: space-between;
    }

    .items-center {
        align-items: center;
    }

    .bg-transparent {
        background-color: transparent;
    }

    .resize-none {
        resize: none;
    }

    .outline-none {
        outline: 2px solid transparent;
        outline-offset: 2px
    }

    .top-0 {
        top: 0;
    }

    .left-0 {
        left: 0;
    }

    .p-4 {
        padding: 1rem;
    }

    .point-events-none {
        pointer-events: none;
    }

    .absolute {
        position: absolute;
    }

    .relative {
        position: relative;
    }

    .monospace-font {
        font-family: 'Courier New', Courier, monospace;
    }

    .arrow {
        display: inline-block;
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 10px solid black;
        margin-left: calc(var(--arrow-position, 0) * 1ch);
    }

        .arrow.hidden {
            visibility: hidden;
        }
</style>
<Card HeaderText="Typing Trainer" class="mt-3">
    <BodyTemplate>
        <div id="inputArea" class="mb-4 p-4 bg-body-secondary rounded relative">
            <textarea id="typingInput"
                      @ref="_inputRef"
                      @bind="_textInput"
                      @oninput="HandleInputChange"
                      @onkeydown="HandleKeyDown"
                      @onkeyup="HandleKeyUp"
                      spellcheck="false"
                      class="w-full h-full bg-transparent absolute p-4 resize-none outline-none top-0 left-0 monospace-font"
                      style="color: transparent; caret-color: white; overflow:hidden"
                      disabled="@_isCompleted"></textarea>
            <div class="pointer-events-none">
                @for (var i = 0; i < Text.Length; i++)
                {
                    <span key="@i" class="arrow @(i == _cursorPosition ? "" : "hidden")"></span>
                }
            </div>
            <div class="pointer-events-none">
                @for (var i = 0; i < Text.Length; i++)
                {
                    <span key="@i" class="monospace-font @(i >= _textInput.Length ? "" : GetCharClass(i))">
                        @Text[i]
                    </span>
                }
            </div>
            <div class="pointer-events-none mt-2">
                @for (var i = 0; i < _inputChars.Length; i++)
                {
                    <span key="@i" class="monospace-font @(i >= _textInput.Length ? "" : GetCharClass(i))">
                        @((MarkupString)(_inputChars[i] == ' ' ? "&nbsp;" : _inputChars[i].ToString()))
                    </span>
                }
            </div>
        </div>
        <div class="d-flex justify-between items-center mb-4">
            <div>
                <p>WPM: @_wpm</p>
                <p>Accuracy: @_accuracy%</p>
            </div>
            <Button OnClick="HandleReset">Reset</Button>
        </div>
        <Keyboard LastKeyPressed="@_lastKeyPressed" LeftShiftPressed="@_leftShiftPressed" RightShiftPressed="@_rightShiftPressed" />
    </BodyTemplate>
</Card>
<TypingStats Text="@Text"
             UserInput="@_textInput"
             OnWpmChanged="@(wpm=>_wpm=wpm)"
             OnAccuracyChanged="@(accuracy=>_accuracy=accuracy)"
             @ref="@_typingStats"></TypingStats>

@code {
    [Parameter]
    public string Text { get; set; } = string.Empty;
    private string _textInput = string.Empty;
    private string _inputChars = string.Empty;
    private string? _lastKeyPressed;
    private bool _leftShiftPressed = false;
    private bool _rightShiftPressed = false;
    private int _cursorPosition = 0;
    private ElementReference _inputRef;
    private int _wpm;
    private int _accuracy;
    private TypingStats? _typingStats;
    private bool _isCompleted = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _inputRef.FocusAsync();
        }
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        var newInput = e.Value?.ToString();
        if (newInput != null && newInput.Length <= Text.Length)
        {
            _textInput = newInput;
            _cursorPosition = newInput.Length;
            UpdateEchoChars();
            if (_textInput.Length == Text.Length)
            {
                _isCompleted = true;
            }
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ShiftLeft":
                _leftShiftPressed = true;
                break;
            case "ShiftRight":
                _rightShiftPressed = true;
                break;
            case "Space":
                _lastKeyPressed = e.Code;
                break;
            default:
                _lastKeyPressed = e.Key;
                break;
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ShiftLeft":
                _leftShiftPressed = false;
                break;
            case "ShiftRight":
                _rightShiftPressed = false;
                break;
            default:
                _lastKeyPressed = null;
                break;
        }
    }

    private string GetCharClass(int index)
    {
        if (_textInput.Length <= index)
        {
            return string.Empty;
        }
        return _textInput[index] == Text[index] ? "text-success" : "text-danger bg-red-100";
    }

    private void UpdateEchoChars()
    {
        _inputChars = string.Empty;
        foreach (var t in _textInput)
        {
            _inputChars += t;
        }
    }

    private void HandleReset()
    {
        _textInput = "";
        _inputChars = "";
        _cursorPosition = 0;
        _wpm = 0;
        _accuracy = 0;
        _lastKeyPressed = null;
        _leftShiftPressed = false;
        _rightShiftPressed = false;
        _isCompleted = false;
        _typingStats?.Reset();
        _inputRef.FocusAsync();
    }
}
