@page "/typing-practice"
@inject ILogger Logger

<Card class="mt-3">
    <BodyTemplate>
        <div id="inputArea" class="mb-4 p-4 bg-body-secondary rounded relative">
            <textarea id="typingInput" @ref="_inputRef" @bind="_textInput" @oninput="HandleInputChange"
                @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" spellcheck="false"
                class="w-full h-full bg-transparent absolute p-4 resize-none outline-none top-0 left-0 monospace-font"
                style="color: transparent; caret-color: transparent; overflow:hidden"
                disabled="@_isCompleted"></textarea>
            <div class="pointer-events-none">
                @for (var i = 0; i < Text.Length; i++)
                {
                    <span key="@i" class="monospace-font @(i >= _textInput.Length ? "" : GetCharClass(i))">
                        @((MarkupString)(Text[i] == ' ' ? "&nbsp;" : Text[i].ToString()))
                    </span>
                }
            </div>
            <div class="pointer-events-none mt-2">
                @for (var i = 0; i < _inputChars.Length; i++)
                {
                    <span key="@i" class="monospace-font @(i >= _textInput.Length ? "" : GetCharClass(i))">
                        @((MarkupString)(_inputChars[i] == ' ' ? "&nbsp;" : _inputChars[i].ToString()))
                    </span>
                }
                @if (!_isCourseFinished)
                {
                    <span key="@_inputChars.Length" class="monospace-font arrowUp"></span>
                }
            </div>
        </div>
        <div class="d-flex justify-between items-center mb-4">
            <div>
                <p>WPM: @_wpm, Accuracy: @_accuracy%, @Level.ToString()</p>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(CurrentLesson?.Instruction))
        {
            <MessageBox Header="@_lessonHeader" Message="@CurrentLesson?.Instruction" IsCollapse="false" TextType="MessageTextType.Markdown" />
        }
        <Keyboard LastKeyPressed="@_lastKeyPressed" LeftShiftPressed="@_leftShiftPressed"
            RightShiftPressed="@_rightShiftPressed" />
        <KeyEventGenerator @ref="_keyEventGenerator" OnKeyEventGenerated="HandleKeyEventGenerated"
            CharExpected="@_nextKeyExpected" KeyEventArgs="@_keyEventArgs"></KeyEventGenerator>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-between items-center mb-4">
            <p>@Description</p>
        </div>
    </FooterTemplate>
</Card>
<TypingStatsCalculator Text="@Text" UserInput="@_textInput" OnWpmChanged="@(wpm => _wpm = wpm)"
    OnAccuracyChanged="@(accuracy => _accuracy = accuracy)" @ref="@_typingStats"></TypingStatsCalculator>

@code {
    [Parameter]
    public Lesson? CurrentLesson { get; set; }

    [Parameter]
    public TrainingType TrainingType { get; set; }

    [Parameter]
    public string Description { get; set; } = TypingMasterConstants.DefaultPracticePrompt;

    [Parameter]
    public EventCallback<DrillStats> OnTypingCompleted { get; set; }

    private string Text => CurrentLesson?.PracticeText ?? string.Empty;
    private string _textInput = string.Empty;
    private string _inputChars = string.Empty;
    private char _nextKeyExpected;
    private string? _lastKeyPressed;
    private bool _leftShiftPressed = false;
    private bool _rightShiftPressed = false;
    private int _cursorPosition = 0;
    private ElementReference _inputRef;
    private string _lessonHeader = string.Empty;
    private int _wpm;
    private double _accuracy;
    private SkillLevel Level => (_wpm, _accuracy).GetSkillLevel();
    private TypingStatsCalculator? _typingStats;
    private KeyEventGenerator? _keyEventGenerator;
    private bool _isCompleted = false;
    private bool _isCourseFinished = false;
    private KeyboardEventArgs? _keyEventArgs;
    private Queue<KeyEvent> _keyEvents = [];

    protected override void OnInitialized()
    {
        _typingStats = new TypingStatsCalculator();
        _keyEventGenerator = new KeyEventGenerator();
        _nextKeyExpected = string.IsNullOrEmpty(Text) ? '\0' : Text[_textInput.Length];
        _lessonHeader = $"Lesson: {CurrentLesson?.Id}";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _inputRef.FocusAsync();
    }

    private async Task HandleInputChange(ChangeEventArgs e)
    {
        var newInput = e.Value?.ToString();
        if (newInput != null && newInput.Length <= Text.Length + 1)
        {
            _textInput = newInput;
            _cursorPosition = newInput.Length;
            UpdateEchoChars();

            // make sure the last character can be input
            if (_textInput.Length == Text.Length + 1)
            {
                _isCompleted = true;
                await OnTypingCompleted.InvokeAsync(new DrillStats
                {
                    LessonId = CurrentLesson.Id,
                    PracticeText = Text,
                    TypedText = _textInput[..^1],
                    Wpm = _wpm,
                    Accuracy = _accuracy,
                    KeyEvents = _keyEvents.Copy(),
                    Type = TrainingType,
                    StartTime = _keyEvents.FirstOrDefault()?.KeyDownTime,
                    FinishTime = DateTime.Now
                });
            }
            else
            {
                var idx = _textInput.Length >= Text.Length ? Text.Length - 1 : _textInput.Length;
                _nextKeyExpected = Text[idx];
            }
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ShiftLeft":
                _leftShiftPressed = true;
                break;
            case "ShiftRight":
                _rightShiftPressed = true;
                break;
            case "Space":
                _lastKeyPressed = e.Code;
                _keyEventArgs = e;
                _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                break;
            default:
                _lastKeyPressed = e.Key;
                _keyEventArgs = e;
                _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                break;
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ShiftLeft":
                _leftShiftPressed = false;
                break;
            case "ShiftRight":
                _rightShiftPressed = false;
                break;
            default:
                _lastKeyPressed = null;
                _keyEventArgs = e;
                _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                break;
        }
    }

    private string GetCharClass(int index)
    {
        if (_isCourseFinished)
        {
            return "text-success";
        }

        if (_textInput.Length <= index)
        {
            return string.Empty;
        }

        try
        {
            if (index < _textInput.Length)
            {
                if (index < Text.Length)
                {
                    return _textInput[index] == Text[index] ? "text-success" : "text-danger bg-red-100";
                }
            }

            return string.Empty;

        }
        catch (Exception e)
        {
            Logger.Debug($"Index: {index}");
            Logger.Debug($"GetCharClass-Test:{Text}:{Text.Length}");
            Logger.Debug($"GetCharClass-Typed:{_textInput}:{_textInput.Length}");
            throw;
        }
    }

    private void UpdateEchoChars()
    {
        _inputChars = string.Empty;
        foreach (var t in _textInput)
        {
            _inputChars += t;
        }
    }

    public void HandleReset(bool courseFinished = false)
    {
        _textInput = "";
        _inputChars = "";
        _cursorPosition = 0;
        _wpm = 0;
        _accuracy = 0;
        _lastKeyPressed = null;
        _leftShiftPressed = false;
        _rightShiftPressed = false;
        _isCompleted = false;
        _typingStats?.Reset();
        _inputRef.FocusAsync();
        _keyEvents.Clear();
        _nextKeyExpected = Text[0];
        _keyEventGenerator?.Reset();
        if (courseFinished)
        {
            _isCompleted = true;
            _isCourseFinished = true;
        }
    }

    public async Task FocusInput()
    {
        await _inputRef.FocusAsync();
    }

    private void HandleKeyEventGenerated(Queue<KeyEvent> keyEvents)
    {
        var jsonString = JsonSerializer.Serialize(keyEvents);
        Logger.Debug($"KeyEvents: {jsonString}");
        _keyEvents = keyEvents;
    }
}
