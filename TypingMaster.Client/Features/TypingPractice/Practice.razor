@page "/typing-practice"
@inject ILogger Logger
@inject ApplicationContext AppState
@using System.Text
@using TypingMaster.Client.Features.Models

<Card class="mt-3">
    <BodyTemplate>

        <div class="d-flex justify-content-center">
            <div id="inputArea" class="mb-4 p-4 bg-body-secondary rounded relative" style="width: @(LineWidth * 0.88)em !important; 
                        min-width: @(LineWidth * 0.90)em !important; 
                        max-width: @(LineWidth * 0.90)em !important;">
                <textarea id="typingInput" @ref="_inputRef" @bind="_textInput" @oninput="HandleInputChange"
                @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" spellcheck="false"
                class="w-full h-full bg-transparent absolute p-4 resize-none outline-none top-0 left-0 monospace-font"
                style="color: transparent; caret-color: transparent; overflow:hidden" disabled="@_isCompleted">
                </textarea>
                @for (var i = 0; i < _lines.Count; i++)
                {
                    var id = i + 1;
                    <TextDisplay Id="@id" CurrentLineId="@_currentLineId" Text="@_lines[i]" InputChars="@_textInput"
                    IsLineCompleted="@_isLineCompleted" IsLessonCompleted="@_isCompleted"
                    IsCourseFinished="@_isCourseFinished" CursorPosition="@_cursorPosition"
                    IsStatsUpdating="@_isStatsUpdating" OnLineFinished="HandleLineFinished" @ref="_textDisplays[id]" />
                }
            </div>
        </div>
        <div class="d-flex justify-content-center mb-4">
            <TypingStats Wpm="@_wpm" Accuracy="@_accuracy" ShowLevel="true" Class="compact" />
        </div>
        @if (IsShowProgress)
        {
            <ProgressPanel Model="@_progressPanelModel"/>
        }

        @if (!string.IsNullOrEmpty(CurrentLesson?.Lesson.Instruction))
        {
            <MessageBox Header="@_lessonHeader" Message="@CurrentLesson.Lesson?.Instruction" IsCollapse="false"
            TextType="MessageTextType.Markdown" />
        }

        <Keyboard LastKeyPressed="@_lastKeyPressed" LeftShiftPressed="@_leftShiftPressed"
        RightShiftPressed="@_rightShiftPressed" FocusKeys="@_focusKeys" />

        <KeyEventGenerator @ref="_keyEventGenerator" OnKeyEventGenerated="HandleKeyEventGenerated"
        CharExpected="@_nextKeyExpected" KeyEventArgs="@_keyEventArgs">
        </KeyEventGenerator>

    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex justify-between items-center mb-4">
            <p>@Description</p>
        </div>
    </FooterTemplate>
</Card>

<TypingStatsCalculator Text="@CurrentLesson?.Lesson.PracticeText" UserInput="@_totalInputText"
OnWpmChanged="@(wpm => { _wpm = wpm; StateHasChanged(); })"
OnAccuracyChanged="@(accuracy => { _accuracy = accuracy; StateHasChanged(); })" @ref="@_typingStats"
OnStatsUpdating="HandleStatsUpdating">
</TypingStatsCalculator>

@code {

    // todo: fix the re practice button
    // todo: fix the key event generator for practice, the result is not correct
    // todo: fix the back key event for the first character of a line, need navigate to the previous line
    // todo: fix the issue of processing last key event, if the lesson finished, throw the last key event
    // todo: fix the issue of calculating the accuracy for the last key, currently the last key is not counted
    // todo: fix the issue lesson event handler for beginning course
    [Parameter]
    public PracticeLessonResult? CurrentLesson
    {
        get => _lessonDto;
        set
        {
            if (value != null && _lessonDto != value)
            {
                _lessonDto = value;
                SetupPracticeText();
            }
        }
    }

    [Parameter] public TrainingType TrainingType { get; set; }

    [Parameter] public string Description { get; set; } = TypingMasterConstants.DefaultPracticePrompt;

    [Parameter] public EventCallback<DrillStats> OnTypingCompleted { get; set; }

    [Parameter] public bool IsShowProgress { get; set; }

    private ElementReference _inputRef;
    private TypingStatsCalculator? _typingStats;
    private KeyEventGenerator? _keyEventGenerator;
    private KeyboardEventArgs? _keyEventArgs;
    private Queue<KeyEvent> _keyEvents = [];

    private PracticeLessonResult? _lessonDto;
    private List<string> _lines = [];
    private List<string> _lineTypedTexts = [];
    private int _currentLineId = 1;
    private string _text = string.Empty;
    private string _totalInputText = string.Empty;
    private string _textInput = string.Empty;
    private List<string> _focusKeys = [];
    private string? _lastKeyPressed;
    private char _nextKeyExpected;
    private bool _leftShiftPressed;
    private bool _rightShiftPressed;
    private int _cursorPosition;
    private string _lessonHeader = string.Empty;
    private int _wpm;
    private double _accuracy;
    private bool _isLineCompleted;
    private bool _isCompleted;
    private bool _isCourseFinished;
    private bool _isStatsUpdating;
    private bool _isProcessingKeyEvent;
    private readonly Dictionary<int, TextDisplay> _textDisplays = [];
    private ProgressPanelModel? _progressPanelModel;

    private int _lineWidth;
    public int LineWidth
    {
        get
        {
            if (_lineWidth != 0)
            {
                return _lineWidth;
            }

            _lineWidth = AppState.GetLineWidth();
            return _lineWidth;
        }
    }

    protected override void OnInitialized()
    {
        _typingStats = new TypingStatsCalculator();
        _keyEventGenerator = new KeyEventGenerator();
        _nextKeyExpected = string.IsNullOrEmpty(_text) ? '\0' : _text[0];
        _lessonHeader = $"Lesson: {_lessonDto?.Lesson?.Id}";
        _focusKeys = _lessonDto?.Lesson == null ? [] : _lessonDto?.Lesson?.Target.ToList();

        _lineTypedTexts = _lines.Select(_ => string.Empty).ToList();

        _progressPanelModel = _lessonDto != null
            ? new ProgressPanelModel
            {
                StatTarget = _lessonDto.TargetStats,
                LessonNumber = _lessonDto.Lesson.Id,
                TotalLessons = _lessonDto.LessonCount
            }
            : new ProgressPanelModel
            {
                StatTarget = new StatsBase(),
                LessonNumber = 0,
                TotalLessons = 0
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _inputRef.FocusAsync();
    }

    private Task HandleInputChange(ChangeEventArgs e)
    {
        var newInput = e.Value?.ToString();
        if (newInput != null && newInput.Length <= _text.Length + 1)
        {
            _textInput = newInput;
            _cursorPosition = newInput.Length;
            _totalInputText = GetTotalInputText(_textInput);
            if (_cursorPosition < _text.Length)
            {
                _nextKeyExpected = _text[_cursorPosition];
            }
        }

        return Task.CompletedTask;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (_isProcessingKeyEvent) return;

        _isProcessingKeyEvent = true;
        try
        {
            switch (e.Code)
            {
                case "ShiftLeft":
                    _leftShiftPressed = true;
                    break;
                case "ShiftRight":
                    _rightShiftPressed = true;
                    break;
                case "Space":
                    _lastKeyPressed = e.Code;
                    _keyEventArgs = e;
                    _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                    break;
                default:
                    _lastKeyPressed = e.Key;
                    _keyEventArgs = e;
                    _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                    break;
            }
        }
        finally
        {
            _isProcessingKeyEvent = false;
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (_isProcessingKeyEvent) return;

        _isProcessingKeyEvent = true;
        try
        {
            switch (e.Code)
            {
                case "ShiftLeft":
                    _leftShiftPressed = false;
                    break;
                case "ShiftRight":
                    _rightShiftPressed = false;
                    break;
                default:
                    _lastKeyPressed = null;
                    _keyEventArgs = e;
                    _keyEventGenerator?.HandleKeyEvent(_keyEventArgs);
                    break;
            }
        }
        finally
        {
            _isProcessingKeyEvent = false;
        }
    }

    private void HandleLineFinished((int lineId, string textInput) lineState)
    {
        if (!_lineTypedTexts.Any())
        {
            _lineTypedTexts = _lines.Select(_ => string.Empty).ToList();
        }

        // Update the _lineTypedTexts with the completed line's text
        if (lineState.lineId > 0 && lineState.lineId <= _lineTypedTexts.Count)
        {
            // we need take the last character from the lineState.textInput
            // because we used the textInput to check for line completion
            if (!string.IsNullOrEmpty(lineState.textInput))
            {
                var trimmedText = lineState.textInput[..^1];
                var extraChar = lineState.textInput[^1];
                _lineTypedTexts[lineState.lineId - 1] = trimmedText;

                if (lineState.lineId < _lines.Count)
                {
                    // Prepopulate the next line with the extra character
                    _textInput = extraChar.ToString();
                    _cursorPosition = 1;
                }
            }
        }

        // Check if there are more lines to type
        if (lineState.lineId < _lines.Count)
        {
            // Move to the next line
            _currentLineId = lineState.lineId + 1;
            _isLineCompleted = false;

            // Set the next key to expect
            _nextKeyExpected = !string.IsNullOrEmpty(_text) ? _text[1] : '\0';
        }
        else
        {
            var curLesson = _lessonDto?.Lesson;

            // All lines completed, mark as finished
            _isLineCompleted = true;
            _isCompleted = true;
            _isCourseFinished = curLesson?.IsCourseComplete ?? false;
            StateHasChanged();

            // Trigger the typing completed event
            OnTypingCompleted.InvokeAsync(new DrillStats
            {
                LessonId = curLesson?.Id ?? 0,
                PracticeText = string.Join("", _lines),
                TypedText = string.Join("", _lineTypedTexts),
                Wpm = _wpm,
                Accuracy = _accuracy,
                KeyEvents = _keyEvents.Copy(),
                Type = TrainingType,
                StartTime = _keyEvents.FirstOrDefault()?.KeyDownTime,
                FinishTime = DateTime.Now,
                Phases = AppState.CurrentPracticePhase
            });
        }

    }

    private void SetupPracticeText()
    {
        _lessonHeader = $"Lesson: {_lessonDto?.Lesson.Id}";
        _focusKeys = _lessonDto?.Lesson == null ? [] : _lessonDto.Lesson.Target.ToList();

        // get lines of text
        var curLesson = _lessonDto?.Lesson;
        _lines = GetPracticeText(curLesson?.PracticeText ?? string.Empty);

        // set text
        if (_lines.Count > 0 && _currentLineId > 0 && _currentLineId <= _lines.Count)
        {
            _text = _lines[_currentLineId - 1];
            _nextKeyExpected = _text[0];
        }
        else
        {
            _text = string.Empty;
            _nextKeyExpected = '\0';
        }

        // Reset stats when setting up new practice text
        _wpm = 0;
        _accuracy = 0;
        if (_progressPanelModel != null)
        {
            _progressPanelModel.CurrentWpm = 0;
            _progressPanelModel.CurrentAccuracy = 0;
            _progressPanelModel.StatTarget = _lessonDto?.TargetStats;
            _progressPanelModel.LessonNumber = _lessonDto?.Lesson.Id ?? 0;
            _progressPanelModel.TotalLessons = _lessonDto?.LessonCount ?? 0;
        }
        _typingStats?.Reset();
        _isLineCompleted = false;
        _isCompleted = false;
        StateHasChanged();
    }

    public void HandleReset(bool courseFinished = false)
    {
        _textInput = "";
        _totalInputText = "";
        _cursorPosition = 0;
        _wpm = 0;
        _accuracy = 0;
        if (_progressPanelModel != null)
        {
            _progressPanelModel.CurrentWpm = 0;
            _progressPanelModel.CurrentAccuracy = 0;
        }
        _lastKeyPressed = null;
        _leftShiftPressed = false;
        _rightShiftPressed = false;
        _isCompleted = false;
        _typingStats?.Reset();
        _inputRef.FocusAsync();
        _keyEvents.Clear();
        _nextKeyExpected = _text[0];
        _keyEventGenerator?.Reset();
        //_focusKeys = [];
        _lineTypedTexts = _lines.Select(_ => string.Empty).ToList();

        foreach (var textDisplay in _textDisplays.Values)
        {
            textDisplay.Reset();
        }

        _currentLineId = 1;

        if (courseFinished)
        {
            _isCompleted = true;
            _isCourseFinished = true;
        }
    }

    public async Task FocusInput()
    {
        await _inputRef.FocusAsync();
    }

    private void HandleKeyEventGenerated(Queue<KeyEvent> keyEvents)
    {
        if (Logger.IsEnabled(Serilog.Events.LogEventLevel.Verbose))
        {
            var jsonString = JsonSerializer.Serialize(keyEvents);
            Logger.Verbose($"KeyEvents: {jsonString}");
        }
        _keyEvents = keyEvents;
    }

    private void HandleStatsUpdating(bool isStatsUpdating)
    {
        _isStatsUpdating = isStatsUpdating;
        _progressPanelModel.CurrentWpm = _wpm;
        _progressPanelModel.CurrentAccuracy = _accuracy;
        StateHasChanged();
    }

    private List<string> GetPracticeText(string rawText)
    {
        if (string.IsNullOrEmpty(rawText))
        {
            return [];
        }

        var lines = new List<string>();
        var startIndex = 0;

        while (startIndex < rawText.Length)
        {
            var remainingLength = rawText.Length - startIndex;
            var lineLength = Math.Min(LineWidth, remainingLength);
            var lineText = rawText.Substring(startIndex, lineLength);
            lines.Add(lineText);
            startIndex += lineLength;
        }

        return lines;
    }

    private string GetTotalInputText(string inputText)
    {
        var totalInputText = new StringBuilder();
        foreach (var line in _lineTypedTexts)
        {
            totalInputText.Append(line);
        }
        totalInputText.Append(inputText);
        return totalInputText.ToString();
    }
}
