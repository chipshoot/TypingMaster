<div class="d-flex flex-column items-center space-y-2">
    @for (var rowIndex = 0; rowIndex < _keyboardLayout.Length; rowIndex++)
    {
        <div key="@rowIndex" class="d-flex space-x-1">
            @if (rowIndex == 3)
            {
                @RenderKey("ShiftLeft")
            }
            @foreach (var key in _keyboardLayout[rowIndex])
            {
                @RenderKey(key)
            }
            @if (rowIndex == 3)
            {
                @RenderKey("ShiftRight")
            }
        </div>
    }
    <div class="d-flex space-x-1">
        @RenderKey("Space")
    </div>
</div>

@code {

    [Parameter]
    public string? LastKeyPressed { get; set; } = null;

    [Parameter]
    public bool LeftShiftPressed { get; set; }

    [Parameter]
    public bool RightShiftPressed { get; set; }

    [Parameter]
    public List<string> FocusKeys { get; set; } = [];

    [Parameter]
    public bool ShowFingerColors { get; set; } = false;

    private readonly string[][] _keyboardLayout =
                [
                    ["`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "="],
    ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]"],
    ["A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'"],
    ["Z", "X", "C", "V", "B", "N", "M", ",", ".", "/"]
    ];

    private readonly Dictionary<string, string> _fingerColorMap = new()
    {
        // Left pinky (green)
        ["`"] = "finger-pinky-left", ["1"] = "finger-pinky-left", ["Q"] = "finger-pinky-left", ["A"] = "finger-pinky-left", ["Z"] = "finger-pinky-left",
        // Left ring (blue)
        ["2"] = "finger-ring-left", ["W"] = "finger-ring-left", ["S"] = "finger-ring-left", ["X"] = "finger-ring-left",
        // Left middle (yellow)
        ["3"] = "finger-middle-left", ["E"] = "finger-middle-left", ["D"] = "finger-middle-left", ["C"] = "finger-middle-left",
        // Left index (red)
        ["4"] = "finger-index-left", ["5"] = "finger-index-left", ["R"] = "finger-index-left", ["T"] = "finger-index-left", ["F"] = "finger-index-left", ["G"] = "finger-index-left", ["V"] = "finger-index-left", ["B"] = "finger-index-left",
        // Right index (light green)
        ["6"] = "finger-index-right", ["7"] = "finger-index-right", ["Y"] = "finger-index-right", ["U"] = "finger-index-right", ["H"] = "finger-index-right", ["J"] = "finger-index-right", ["N"] = "finger-index-right", ["M"] = "finger-index-right",
        // Right middle (pink)
        ["8"] = "finger-middle-right", ["I"] = "finger-middle-right", ["K"] = "finger-middle-right", [","] = "finger-middle-right",
        // Right ring (purple)
        ["9"] = "finger-ring-right", ["O"] = "finger-ring-right", ["L"] = "finger-ring-right", ["."] = "finger-ring-right",
        // Right pinky (orange)
        ["0"] = "finger-pinky-right", ["-"] = "finger-pinky-right", ["="] = "finger-pinky-right", ["P"] = "finger-pinky-right", ["["] = "finger-pinky-right", ["]"] = "finger-pinky-right", [";"] = "finger-pinky-right", ["'"] = "finger-pinky-right", ["/"] = "finger-pinky-right",
        // Thumbs (spacebar, purple)
        ["Space"] = "finger-thumb"
    };

    private RenderFragment RenderKey(string key) => builder =>
    {
        var isPressed = string.Equals(key, LastKeyPressed, StringComparison.OrdinalIgnoreCase);
        var displayKey = (LeftShiftPressed || RightShiftPressed) && key.Length == 1 && char.IsLetter(key[0]) ? key.ToUpper() : key;
        displayKey = key is "ShiftLeft" or "ShiftRight" ? "Shift" : displayKey;
        var isShiftKey = key is "ShiftLeft" or "ShiftRight";
        var isSpaceKey = key == "Space";
        var isFocused = FocusKeys.Select(k => k.ToLower()).Contains(key.ToLower());

        // Determine key class based on state
        string keyClass;
        if (ShowFingerColors && _fingerColorMap.TryGetValue(key, out var fingerClass))
        {
            keyClass = fingerClass;
            if (isPressed)
            {
                keyClass += " finger-key-active";
            }
            else if (isFocused)
            {
                keyClass += " finger-key-target";
            }
        }
        else if (isPressed || (key == "ShiftLeft" && LeftShiftPressed) || (key == "ShiftRight" && RightShiftPressed))
        {
            keyClass = "bg-primary keyboard-text-white";
        }
        else if (isFocused)
        {
            keyClass = "keyboard-key-focus";
        }
        else
        {
            keyClass = "bg-body-secondary";
        }

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", $"{(isShiftKey ? "keyboard-w-16" : isSpaceKey ? "keyboard-w-40" : "keyboard-w-10")} keyboard-h-10 d-flex items-center justify-center border rounded {keyClass}");
        builder.AddContent(2, isSpaceKey ? " " : displayKey);
        builder.CloseElement();
    };
}