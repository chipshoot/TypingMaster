@inject ILogger Logger

<Card class="mt-3">
    <HeaderTemplate>
        <div class="d-flex justify-content-between align-items-center" style="width:100%">
            <div>
                Typing Trainer
            </div>
            <div class="d-flex">
                <div class="me-2">
                    <PracticeHistory StatsList="@StatsList"></PracticeHistory>
                </div>
                <div>
                    <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                </div>
            </div>
        </div>
    </HeaderTemplate>
    <BodyTemplate>
        <Practice Text="@_text" OnTypingCompleted="OnPracticeFinished" @ref="@_practice"></Practice>
    </BodyTemplate>
</Card>
@code {
    private ITypingTrainer? _trainer;
    private string _text = string.Empty;
    private Practice? _practice;
    private Account? _account;
    private bool _isCompleted;
    private ICourse? _course;
    private Lesson? _curLesson;

    private IList<DrillStats> StatsList => _account?.History.PracticeStats.ToList() ?? [];


    protected override void OnInitialized()
    {
        var courseService = new CourseService();
        var accountService = new AccountService(courseService);
        _account = accountService.GetAccount(1);
        _trainer = new TypingTrainer(_account, Logger);
        _course = _account.CurrentCourse;
        var stats = _account.History.PracticeStats.LastOrDefault() ?? _course.GenerateStartStats();
        _curLesson = _course.GetPracticeLesson(stats);
        _text = _curLesson?.PracticeText ?? string.Empty;
    }

    private void OnPracticeFinished(DrillStats stats)
    {
        if (_account == null || _course == null)
        {
            return;
        }

        stats.CourseId = _account.CurrentCourse.Id;
        stats.LessonId = _curLesson?.Id ?? 0;
        _trainer?.CheckPracticeResult(stats);
        if (!_course.IsCompleted(stats))
        {
            _curLesson = _course.GetPracticeLesson(stats);
            _text = _curLesson?.PracticeText ?? string.Empty;
            _isCompleted = false;
        }
        else
        {
            _text = _course.CompleteText;
            _isCompleted = true;
        }

        _practice?.HandleReset(_isCompleted);
    }

    private void ResetPractice()
    {
        if (_account != null && _account.History.PracticeStats.Any())
        {
            var stats = _account.History.PracticeStats.Last();
            _practice?.HandleReset();
            _text = _course?.GetPracticeLesson(stats)?.PracticeText ?? string.Empty;
            StateHasChanged();
        }
    }
}
