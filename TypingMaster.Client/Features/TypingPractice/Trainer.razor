@page "/trainer"

@inject ILogger Logger
@inject ICourseWebService CourseService
@inject IPracticeLogWebService PracticeLogService
@inject ITypingTrainer TypingTrainer
@inject ApplicationContext AppState

<Card class="mt-3">
    <HeaderTemplate>
        <div class="d-flex justify-content-between align-items-center" style="width:100%">
            <div>
                Typing Trainer
            </div>
            <div class="d-flex">
                <div class="me-2">
                    <PracticeHistory StatsList="@_practiceHistory" OnPageChange="LoadPracticeHistoryPage">
                    </PracticeHistory>
                </div>
                <div>
                    <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                </div>
            </div>
        </div>
    </HeaderTemplate>
    <BodyTemplate>
        <Practice CurrentLesson="@_lessonDto" TrainingType="@TrainingType.Course" OnTypingCompleted="OnPracticeFinished"
        @ref="@_practice" IsShowProgress="true" >
        </Practice>
    </BodyTemplate>
</Card>

@code {
    private const int PageSize = 10;

    private Practice _practice = new();
    private bool _isCompleted;
    private PagedResult<DrillStats> _practiceHistory = new();
    private PracticeLessonResult _lessonDto;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentAccount == null)
        {
            Logger.Error("Cannot find current Account");
            return;
        }

        if (AppState.CurrentCourse == null)
        {
            Logger.Error("Cannot find current Course");
            return;
        }

        // first make sure user's current course is right type
        if (AppState.CurrentCourse.Type != TrainingType.Course)
        {
            var course = await CourseService.GetCourse(AppState.CurrentAccount.CourseId);
            if (course != null)
            {
                AppState.CurrentCourse = course;
            }
        }

        // Load first page of practice history
        await LoadPracticeHistoryPage(1);

        var stats = await GetLastStat();
        var courseId = AppState.CurrentCourse.Id;
        var lineWidth = AppState.GetLineWidth();
        var lessonDto = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats, stats.Phases, lineWidth);
        if (lessonDto == null)
        {
            Logger.Error("Cannot get lesson");
            return;
        }

        _lessonDto = lessonDto;
        AppState.CurrentPracticePhase = lessonDto.Phase;

        TypingTrainer.SetupTrainer(AppState.CurrentAccount, AppState.CurrentCourse);

        StateHasChanged();
    }

    private async Task<DrillStats> GetLastStat()
    {
        if (AppState.CurrentAccount != null)
        {
            // Get later course type practice stats
            var stats = AppState.CurrentAccount.History.PracticeStats
            .Where(p => p.Type == TrainingType.Course)
            .OrderByDescending(p => p.StartTime)
            .FirstOrDefault();

            if (stats != null)
            {
                return stats;
            }

            // If no practice stats found, search database for latest lesson
            var statLst = await PracticeLogService.GetPaginatedDrillStatsAsync(AppState.CurrentAccount.History.Id, 1, 10, true,
            TrainingType.Course);
            stats = statLst.Items.FirstOrDefault();
            if (stats != null)
            {
                return stats;
            }
            else
            {
                stats = await CourseService.GenerateStartStats() ?? new DrillStats();
                if (AppState.CurrentAccount.History.CurrentLessonId > 0)
                {
                    stats.LessonId = AppState.CurrentAccount.History.CurrentLessonId;
                }

                return stats;

            }
        }

        return new DrillStats { LessonId = 1 };
    }

    private async Task LoadPracticeHistoryPage(int page)
    {
        List<DrillStats> stats;
        if (AppState.CurrentAccount?.History?.PracticeStats == null || !AppState.CurrentAccount.History.PracticeStats.Any())
        {
            if (AppState.CurrentAccount?.History == null)
            {
                return;
            }

            var statLst = await PracticeLogService.GetPaginatedDrillStatsAsync(AppState.CurrentAccount.History.Id, page, PageSize,
            true, TrainingType.Course);
            stats = ((List<DrillStats>)statLst.Items)
            .Where(p => p.Type == TrainingType.Course)
            .OrderByDescending(p => p.StartTime)
            .ToList();
        }
        else
        {
            stats = AppState.CurrentAccount.History.PracticeStats
            .Where(p => p.Type == TrainingType.Course)
            .OrderByDescending(p => p.StartTime)
            .ToList();
        }

        var totalCount = stats.Count;
        var totalPages = (int)Math.Ceiling(totalCount / (double)PageSize);
        page = Math.Max(1, Math.Min(page, totalPages));

        var pagedStats = stats
        .Skip((page - 1) * PageSize)
        .Take(PageSize)
        .ToList();

        _practiceHistory = new PagedResult<DrillStats>
        {
            Items = pagedStats,
            TotalCount = totalCount,
            Page = page,
            PageSize = PageSize,
            TotalPages = totalPages
        };

        StateHasChanged();
    }

    private async Task OnPracticeFinished(DrillStats stats)
    {
        if (AppState.CurrentAccount == null || AppState.CurrentCourse == null)
        {
            return;
        }

        if (TypingTrainer == null)
        {
            Logger.Error("Null TypingTrainer found");
            return;
        }

        var courseId = AppState.CurrentAccount.CourseId;
        stats.CourseId = courseId;
        await TypingTrainer.SavePracticeHistoryAsync(stats);
        AppState.CurrentAccount = TypingTrainer.Account;

        // Reload the current page of practice history
        await LoadPracticeHistoryPage(_practiceHistory.Page);

        if (AppState?.CurrentAccount?.History == null)
        {
            Logger.Error("OnPracticeFinished: Null History found when getting next lesson");
            throw new ArgumentNullException(nameof(AppState.CurrentAccount.History));
        }

        // Get next lesson
        var lineWidth = AppState.GetLineWidth();
        var nextLessonDto = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats, stats.Phases, lineWidth);
        if (nextLessonDto != null)
        {
            _lessonDto = nextLessonDto;
            var nextLesson = nextLessonDto.Lesson;
            if (!nextLesson.IsCourseComplete)
            {
                _isCompleted = false;
                AppState.CurrentPracticePhase = nextLessonDto.Phase;
                if (nextLesson.Id != AppState.CurrentAccount.History.CurrentLessonId)
                {
                    AppState.CurrentAccount.History.CurrentLessonId = nextLesson.Id;
                }
            }
            else
            {
                _isCompleted = true;
                AppState.CurrentPracticePhase = PracticePhases.NotSet;
            }
        }

        Logger.Verbose("DrillStats: {Serialize}", JsonSerializer.Serialize(stats));
        _practice?.HandleReset(_isCompleted);
        await Task.Delay(100); // Give time for state changes to complete

        if (_practice != null)
        {
            await _practice.FocusInput();
        }
    }

    private async Task ResetPractice()
    {
        if (AppState.CurrentAccount != null && AppState.CurrentAccount.History.PracticeStats.Any())
        {
            var stats = AppState.CurrentAccount.History.PracticeStats.Last();
            _practice?.HandleReset();
            var courseId = AppState.CurrentAccount.CourseId;
            var lineWidth = AppState.GetLineWidth();
            var curLessonDto = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats, stats.Phases, lineWidth);
            AppState.CurrentPracticePhase = curLessonDto?.Phase ?? PracticePhases.NotSet;
            StateHasChanged();
        }
    }
}
