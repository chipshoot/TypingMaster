@page "/trainer"

@inject ILogger Logger
@inject ICourseWebService CourseService
@inject ITypingTrainer TypingTrainer
@inject ApplicationContext AppState

<Card class="mt-3">
    <HeaderTemplate>
        <div class="d-flex justify-content-between align-items-center" style="width:100%">
            <div>
                Typing Trainer
            </div>
            <div class="d-flex">
                <div class="me-2">
                    <PracticeHistory StatsList="@StatsList"></PracticeHistory>
                </div>
                <div>
                    <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                </div>
            </div>
        </div>
    </HeaderTemplate>
    <BodyTemplate>
        <Practice CurrentLesson="@_curLesson" 
                  TrainingType="@TrainingType.Course" 
                  OnTypingCompleted="OnPracticeFinished"
                  @ref="@_practice">
        </Practice>
    </BodyTemplate>
</Card>
@code {
    private string _text = string.Empty;
    private Practice? _practice;
    private bool _isCompleted;
    private Lesson? _curLesson;

    private IList<DrillStats> StatsList => AppState.CurrentAccount?.History.PracticeStats.ToList() ?? [];


    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentAccount == null)
        {
            Logger.Error("Cannot find current Account");
            return;
        }

        if (AppState.CurrentCourse == null)
        {
            Logger.Error("Cannot find current Course");
            return;
        }

        // first make sure user's current course is right type
        if (AppState.CurrentCourse.Type != TrainingType.Course)
        {
            var course = await CourseService.GetCourse(AppState.CurrentAccount.CourseId);
            if (course != null)
            {
                AppState.CurrentCourse = course;
            }
        }

        // system get drill stats sorted by newest record by default, this let use get latest record at first record of the dataset
        var stats = AppState.CurrentAccount.History.PracticeStats.FirstOrDefault() ?? await CourseService.GenerateStartStats();
        var courseId = AppState.CurrentCourse.Id;
        _curLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
        TypingTrainer.SetupTrainer(AppState.CurrentAccount, AppState.CurrentCourse);

        StateHasChanged();
    }

    private async Task OnPracticeFinished(DrillStats stats)
    {
        if (AppState.CurrentAccount == null || AppState.CurrentCourse == null)
        {
            return;
        }

        if (TypingTrainer == null)
        {
            Logger.Error("Null TypingTrainer found");
            return;
        }

        var courseId = AppState.CurrentAccount.CourseId;
        stats.CourseId = courseId;
        await TypingTrainer.SavePracticeHistoryAsync(stats);
        AppState.CurrentAccount = TypingTrainer.Account;

        // Get next lesson
        var nextLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
        if (nextLesson != null)
        {
            if (!nextLesson.IsCourseComplete)
            {
                _curLesson = nextLesson;
                _isCompleted = false;
                if (_curLesson.Id != AppState.CurrentAccount.History.CurrentLessonId)
                {
                    AppState.CurrentAccount.History.CurrentLessonId = _curLesson.Id;
                }
            }
            else
            {
                _curLesson = null;
                _isCompleted = true;
            }
        }

        Logger.Verbose($"DrillStats: {JsonSerializer.Serialize(stats)}");
        _practice?.HandleReset(_isCompleted);
        await Task.Delay(100); // Give time for state changes to complete
        await _practice?.FocusInput();
    }

    private async Task ResetPractice()
    {
        if (AppState.CurrentAccount != null && AppState.CurrentAccount.History.PracticeStats.Any())
        {
            var stats = AppState.CurrentAccount.History.PracticeStats.Last();
            _practice?.HandleReset();
            var courseId = AppState.CurrentAccount.CourseId;
            _curLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
            StateHasChanged();
        }
    }
}
