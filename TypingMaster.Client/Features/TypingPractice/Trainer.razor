@page "/trainer"

@inject ILogger Logger
@inject ICourseWebService CourseService
@inject ITypingTrainer TypingTrainer
@inject ApplicationContext AppState

<Card class="mt-3">
    <HeaderTemplate>
        <div class="d-flex justify-content-between align-items-center" style="width:100%">
            <div>
                Typing Trainer
            </div>
            <div class="d-flex">
                <div class="me-2">
                    <PracticeHistory StatsList="@_practiceHistory" OnPageChange="LoadPracticeHistoryPage">
                    </PracticeHistory>
                </div>
                <div>
                    <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                </div>
            </div>
        </div>
    </HeaderTemplate>
    <BodyTemplate>
        <Practice CurrentLesson="@_curLesson" TrainingType="@TrainingType.Course" OnTypingCompleted="OnPracticeFinished"
            @ref="@_practice">
        </Practice>
    </BodyTemplate>
</Card>

@code {
    private string _text = string.Empty;
    private Practice? _practice;
    private bool _isCompleted;
    private Lesson? _curLesson;
    private PagedResult<DrillStats> _practiceHistory = new();
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentAccount == null)
        {
            Logger.Error("Cannot find current Account");
            return;
        }

        if (AppState.CurrentCourse == null)
        {
            Logger.Error("Cannot find current Course");
            return;
        }

        // first make sure user's current course is right type
        if (AppState.CurrentCourse.Type != TrainingType.Course)
        {
            var course = await CourseService.GetCourse(AppState.CurrentAccount.CourseId);
            if (course != null)
            {
                AppState.CurrentCourse = course;
            }
        }

        // Load first page of practice history
        await LoadPracticeHistoryPage(1);

        // system get drill stats sorted by newest record by default, this let use get latest record at first record of the dataset
        var stats = AppState.CurrentAccount.History.PracticeStats.FirstOrDefault() ?? await CourseService.GenerateStartStats();
        var courseId = AppState.CurrentCourse.Id;
        _curLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
        TypingTrainer.SetupTrainer(AppState.CurrentAccount, AppState.CurrentCourse);

        StateHasChanged();
    }

    private async Task LoadPracticeHistoryPage(int page)
    {
        if (AppState.CurrentAccount?.History?.PracticeStats == null)
        {
            return;
        }

        var stats = AppState.CurrentAccount.History.PracticeStats
        .Where(p => p.Type == TrainingType.Course)
        .OrderByDescending(p => p.StartTime)
        .ToList();

        var totalCount = stats.Count;
        var totalPages = (int)Math.Ceiling(totalCount / (double)PageSize);
        page = Math.Max(1, Math.Min(page, totalPages));

        var pagedStats = stats
        .Skip((page - 1) * PageSize)
        .Take(PageSize)
        .ToList();

        _practiceHistory = new PagedResult<DrillStats>
        {
            Items = pagedStats,
            TotalCount = totalCount,
            Page = page,
            PageSize = PageSize,
            TotalPages = totalPages
        };

        StateHasChanged();
    }

    private async Task OnPracticeFinished(DrillStats stats)
    {
        if (AppState.CurrentAccount == null || AppState.CurrentCourse == null)
        {
            return;
        }

        if (TypingTrainer == null)
        {
            Logger.Error("Null TypingTrainer found");
            return;
        }

        var courseId = AppState.CurrentAccount.CourseId;
        stats.CourseId = courseId;
        await TypingTrainer.SavePracticeHistoryAsync(stats);
        AppState.CurrentAccount = TypingTrainer.Account;

        // Reload the current page of practice history
        await LoadPracticeHistoryPage(_practiceHistory.Page);
    }

    private async Task ResetPractice()
    {
        if (AppState.CurrentAccount != null && AppState.CurrentAccount.History.PracticeStats.Any())
        {
            var stats = AppState.CurrentAccount.History.PracticeStats.Last();
            _practice?.HandleReset();
            var courseId = AppState.CurrentAccount.CourseId;
            _curLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
            StateHasChanged();
        }
    }
}
