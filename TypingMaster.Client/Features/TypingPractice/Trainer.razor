@page "/trainer"
@using System.Text.Json

@inject ILogger Logger
@inject ITypingTrainer TypingTrainer
@inject TypingTrainerContext Context

<Card class="mt-3">
    <HeaderTemplate>
        <div class="d-flex justify-content-between align-items-center" style="width:100%">
            <div>
                Typing Trainer
            </div>
            <div class="d-flex">
                <div class="me-2">
                    <PracticeHistory StatsList="@StatsList"></PracticeHistory>
                </div>
                <div>
                    <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                </div>
            </div>
        </div>
    </HeaderTemplate>
    <BodyTemplate>
        <Practice CurrentLesson="@_curLesson" OnTypingCompleted="OnPracticeFinished" @ref="@_practice"></Practice>
    </BodyTemplate>
</Card>
@code {
    private string _text = string.Empty;
    private Practice? _practice;
    private bool _isCompleted;
    private Lesson? _curLesson;

    private IList<DrillStats> StatsList => Context.CurrentAccount?.History.PracticeStats.ToList() ?? [];


    protected override void OnInitialized()
    {
        if (Context.CurrentAccount == null)
        {
            return;
        }

        var stats = Context.CurrentAccount.History.PracticeStats.LastOrDefault() ?? Context.CurrentCourse?.GenerateStartStats();
        _curLesson = Context.CurrentCourse?.GetPracticeLesson(stats);
        TypingTrainer.Account = Context.CurrentAccount;
    }

    private async Task OnPracticeFinished(DrillStats stats)
    {
        if (Context.CurrentAccount == null || Context.CurrentCourse == null)
        {
            return;
        }

        stats.CourseId = Context.CurrentAccount.CourseId;
        TypingTrainer?.CheckPracticeResult(stats);
        if (!Context.CurrentCourse.IsCompleted(stats))
        {
            _curLesson = Context.CurrentCourse.GetPracticeLesson(stats);
            _isCompleted = false;
        }
        else
        {
            _curLesson = null;
            _isCompleted = true;
        }

        Logger.Debug($"DrillStats: {JsonSerializer.Serialize(stats)}");
        _practice?.HandleReset(_isCompleted);
    }

    private void ResetPractice()
    {
        if (Context.CurrentAccount != null && Context.CurrentAccount.History.PracticeStats.Any())
        {
            var stats = Context.CurrentAccount.History.PracticeStats.Last();
            _practice?.HandleReset();
            _curLesson = Context.CurrentCourse?.GetPracticeLesson(stats);
            StateHasChanged();
        }
    }
}
