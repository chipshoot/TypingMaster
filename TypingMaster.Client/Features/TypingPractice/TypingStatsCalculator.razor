@implements IDisposable

@code {
    [Parameter]
    public string? Text { get; set; } = string.Empty;

    [Parameter]
    public string UserInput { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<int> OnWpmChanged { get; set; }

    [Parameter]
    public EventCallback<double> OnAccuracyChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnStatsUpdating { get; set; }

    private double _elapsedTime;
    private System.Threading.Timer? _timer;
    private DateTime? _startTime;
    private int _wpm;
    private double _accuracy;
    private const int TimerInterval = 1000;
    private bool _isUpdating;
    private string _lastProcessedInput = string.Empty;

    protected override void OnParametersSet()
    {
        Text ??= string.Empty;
        if (UserInput.Length == 1 && _startTime == null)
        {
            StartTimer();
        }
        else if (UserInput.Length == Text.Length && _timer != null)
        {
            StopTimer();
        }
    }

    private void StartTimer()
    {
        _startTime = DateTime.Now;
        _timer = new System.Threading.Timer(_ =>
        {
            if (!_isUpdating)
            {
                _isUpdating = true;
                _elapsedTime = (DateTime.Now - _startTime.Value).TotalSeconds;
                InvokeAsync(async () =>
        {
            await CalculateWpmAndAccuracy();
            _isUpdating = false;
        });
            }
        }, null, 0, TimerInterval);
    }

    private void StopTimer() => _timer?.Dispose();

    private async Task CalculateWpmAndAccuracy()
    {
        if (_startTime == null)
            return;

        if (string.IsNullOrEmpty(Text))
        {
            return;
        }

        // Calculate WPM more efficiently
        var timeInMinutes = _elapsedTime / 60;
        if (timeInMinutes > 0)
        {
            // Count words by splitting on whitespace and filtering empty entries
            var wordsTyped = Text.Split([' ', '\t', '\n', '\r'], StringSplitOptions.RemoveEmptyEntries).Length;
            _wpm = (int)(wordsTyped / timeInMinutes);

            // Calculate Accuracy more efficiently
            // var errors = 0;
            // var minLength = Math.Min(Text.Length, UserInput.Length);
            // for (var i = 0; i < minLength; i++)
            // {
            //     if (Text[i] != UserInput[i])
            //     {
            //         errors++;
            //     }
            // }
            var startIndex = _lastProcessedInput.Length;
            var newErrors = 0;
            for (var i = startIndex; i < UserInput.Length && i < Text.Length; i++)
            {
                if (Text[i] != UserInput[i])
                {
                    newErrors++;
                }
            }
            newErrors += Math.Abs(Text.Length - UserInput.Length); // Add extra characters as errors
            _accuracy = (int)((double)(Text.Length - newErrors) / Text.Length * 100);

            _lastProcessedInput = UserInput;

            await OnStatsUpdating.InvokeAsync(true);
            await OnWpmChanged.InvokeAsync(_wpm);
            await OnAccuracyChanged.InvokeAsync(_accuracy);
        }
    }

    public void Reset()
    {
        _startTime = null;
        _wpm = 0;
        _accuracy = 0;
        _isUpdating = false;
        StopTimer();
    }

    public void Dispose() => _timer?.Dispose();
}
