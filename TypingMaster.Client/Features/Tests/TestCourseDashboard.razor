@page "/tests"
@inject ApplicationContext AppState
@inject ICourseWebService CourseService
@inject NavigationManager Navigation

<div class="test-dashboard">
    <div class="categories-panel">
        <div class="category-card @(SelectedCategory == "allkeys" ? "active" : "")"
        @onclick='() => SelectCategory("allkeys")'>
            <div class="category-icon">
                <i class="fas fa-keyboard"></i>
            </div>
            <div class="category-title">All Key Tests</div>
            <div class="category-description">Test your typing skills across all keys on the keyboard</div>
        </div>
        <div class="category-card @(SelectedCategory == "speed" ? "active" : "")"
        @onclick='() => SelectCategory("speed")'>
            <div class="category-icon">
                <i class="fas fa-tachometer-alt"></i>
            </div>
            <div class="category-title">Speed Tests</div>
            <div class="category-description">Challenge yourself with timed typing exercises</div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(SelectedCategory))
    {
        <div class="lessons-panel">
            <h3 class="mb-4">Available Tests</h3>
            <div class="lesson-list">
                @foreach (var lesson in GetLessonsForCategory(SelectedCategory))
                {
                    <div class="lesson-item @(SelectedLesson?.Id == lesson.Id ? "active" : "")"
                    @onclick="() => SelectLesson(lesson)">
                        <h4>@lesson.Description</h4>
                        <p class="text-muted mb-0">@lesson.Description</p>
                    </div>
                }
            </div>
        </div>
    }

    @if (SelectedLesson != null)
    {
        <div class="details-panel">
            <div class="lesson-details">
                <div class="lesson-header">
                    <h2 class="lesson-title">@SelectedLesson.Description</h2>
                    <p class="text-muted">@SelectedLesson.Description</p>
                </div>

                <div class="lesson-stats">
                    <div class="stat-item">
                        <i class="fas fa-clock stat-icon"></i>
                        @* <span>Duration: @SelectedLesson.Duration min</span> *@
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-chart-line stat-icon"></i>
                        <span>Target WPM: @_target.Wpm</span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-bullseye stat-icon"></i>
                        <span>Target Accuracy: @_target.Accuracy%</span> 
                    </div>
                </div>

                <div class="mt-4">
                    <h4>Instructions</h4>
                    <p>@SelectedLesson.Instruction</p>
                </div>

                <div class="mt-5 text-center">
                    <button @onclick="StartTest" class="start-button">
                        <i class="fas fa-play me-2"></i>
                        Start Test
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {

    private string SelectedCategory { get; set; } = string.Empty;
    private Lesson? SelectedLesson { get; set; }
    private List<Lesson> AllKeyLessons { get; set; } = new();
    private List<Lesson> SpeedLessons { get; set; } = new();
    private CourseDto? _allKeyTestCourse;
    private CourseDto? _speedTestCourse;
    private StatsBase _target = null!;

    // todo: show green color for lessons which are already completed
    protected override async Task OnInitializedAsync()
    {
        if (AppState.IsLoggedIn)
        {
            // Initialize with some sample lessons
            var allKeyTestCourses = await CourseService.GetCoursesByType(AppState.CurrentAccount.Id, TrainingType.AllKeysTest);
            _allKeyTestCourse = allKeyTestCourses.FirstOrDefault();
            if (_allKeyTestCourse != null)
            {
                AllKeyLessons = _allKeyTestCourse.Lessons.ToList();
            }

            var speedTestCourses = await CourseService.GetCoursesByType(AppState.CurrentAccount.Id, TrainingType.SpeedTest);
            _speedTestCourse = speedTestCourses.FirstOrDefault();
            if (_speedTestCourse != null)
            {
                SpeedLessons = _speedTestCourse.Lessons.ToList();
            }

            _target = AppState.CurrentAccount.GoalStats ?? GetDefaultTarget();
        }
        else
        {
            // Get course for guest user
            _allKeyTestCourse = await CourseService.GetCoursesByTypeForGuest(TrainingType.AllKeysTest);
            if (_allKeyTestCourse != null)
            {
                AllKeyLessons = _allKeyTestCourse.Lessons.ToList();
            }

            _speedTestCourse = await CourseService.GetCoursesByTypeForGuest(TrainingType.SpeedTest);
            if (_speedTestCourse != null)
            {
                SpeedLessons = _speedTestCourse.Lessons.ToList();
            }

            _target = GetDefaultTarget();

        }

        StateHasChanged();
    }

    private List<Lesson> GetLessonsForCategory(string category)
    {
        return category switch
        {
            "allkeys" => AllKeyLessons,
            "speed" => SpeedLessons,
            _ => new List<Lesson>()
        };
    }

    private void SelectCategory(string category)
    {
        SelectedCategory = category;
        SelectedLesson = null;
    }

    private void SelectLesson(Lesson lesson)
    {
        SelectedLesson = lesson;
    }


    private void StartTest()
    {
        if (SelectedLesson == null) return;

        AppState.CurrentCourse = SelectedCategory switch
        {
            // Set the current course in AppState based on selected category
            "allkeys" when _allKeyTestCourse != null => _allKeyTestCourse,
            "speed" when _speedTestCourse != null => _speedTestCourse,
            _ => AppState.CurrentCourse
        };
        if (AppState.CurrentAccount != null)
        {
            AppState.CurrentAccount.TestCourseId = AppState.CurrentCourse?.Id ?? Guid.Empty;
        }

        // Navigate to the test page with the lesson ID
        Navigation.NavigateTo($"/allkeytest/{SelectedLesson.Id}");
    }

    private StatsBase GetDefaultTarget()
    {
        return new StatsBase { Wpm = 30, Accuracy = 90 };
    }
}
