@page "/allkeytest"
@page "/allkeytest/{LessonId:int}"

@inject ILogger Logger
@inject ITypingTrainer TypingTrainer
@inject ICourseWebService CourseService
@inject ApplicationContext AppState
@inject IAccountClientService AccountService
@inject NavigationManager NavigationManager

@if (!_isCompleted)
{
    <Card class="mt-3">
        <HeaderTemplate>
            <div class="d-flex justify-content-between align-items-center" style="width:100%">
                <div>
                    Typing Trainer
                </div>
                <div class="d-flex">
                    <div class="me-2">
                        <PracticeHistory StatsList="@_statsList"></PracticeHistory>
                    </div>
                    <div>
                        <Button Color="Color.Primary" OnClick="ResetPractice">RePractise</Button>
                    </div>
                </div>
            </div>
        </HeaderTemplate>
        <BodyTemplate>
            <Practice CurrentLesson="@_curLesson"
            TrainingType="@_trainingType"
            OnTypingCompleted="OnPracticeFinished"
            @ref="@_practice">
            </Practice>
        </BodyTemplate>
    </Card>
}
else
{
    <TestResult></TestResult>
}

@code {
    [Parameter]
    public int LessonId { get; set; }

    private const string NullAccountFound = "Null account found in AllKeyTest component Initialized method";
    private const string NullCourseFound = "Null course found in AllKeyTest component Initialized method";
    private Practice? _practice;
    private bool _isCompleted;
    private Lesson? _curLesson;

    private IList<DrillStats> _statsList = [];
    private TrainingType _trainingType;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.IsLoggedIn && AppState.CurrentAccount == null)
        {
            AppState.CurrentAccount = await AccountService.GetGuestAccount();
        }
        else if (AppState.CurrentCourse == null)
        {
            await AppState.GetCourse();
        }

        if (AppState.CurrentAccount == null)
        {
            Logger.Error(NullAccountFound);
            throw new Exception(NullAccountFound);
        }

        if (AppState.CurrentCourse == null)
        {
            Logger.Error(NullCourseFound);
            throw new Exception(NullCourseFound);
        }

        var course = AppState.CurrentCourse;
        _curLesson = course?.Lessons.FirstOrDefault(l => l.Id == LessonId);
        AppState.CurrentAccount.TestCourseId = course.Id;
        _trainingType = course.Type;
        _statsList = AppState.CurrentAccount.History.PracticeStats.Where(s => s.Type == course.Type).ToList();


        TypingTrainer.SetupTrainer(AppState.CurrentAccount, AppState.CurrentCourse);
    }

    private async Task OnPracticeFinished(DrillStats stats)
    {
        if (AppState.CurrentAccount == null || AppState.CurrentCourse == null)
        {
            return;
        }

        stats.CourseId = AppState.CurrentAccount.TestCourseId;
        TypingTrainer?.CheckPracticeResult(stats);
        _practice?.HandleReset(_isCompleted);
        if (AppState.IsLoggedIn)
        {
            await AccountService.UpdateAccountWithCourseAsync(AppState);
            NavigationManager.NavigateTo("/reports");
        }
        else
        {
            _isCompleted = true;
        }
    }

    private async Task ResetPractice()
    {
        if (AppState.CurrentAccount != null && AppState.CurrentAccount.History.PracticeStats.Any())
        {
            var stats = AppState.CurrentAccount.History.PracticeStats.Last();
            var courseId = AppState.CurrentAccount.TestCourseId;
            _curLesson = await CourseService.GetPracticeLesson(courseId, stats.LessonId, stats);
        }

        _practice?.HandleReset();
        StateHasChanged();
    }
}