@page "/reports"

@inject ApplicationContext AppState
@inject NavigationManager Navigation
@inject IReportWebService ReportService

<style>
    .header-cell {
        align-items: center;
        text-align: center;
        word-break: break-all;
    }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 1rem;
    }

    .page-item {
        margin: 0 0.25rem;
    }

    .page-link {
        padding: 0.25rem 0.5rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        cursor: pointer;
    }

    .page-link.active {
        background-color: #0d6efd;
        color: white;
        border-color: #0d6efd;
    }
</style>

<RequireAuthentication ShowMessage="true">
    <Tab IsCard="true">
        <TabItem Text="Progress" CssClass="progress-table">
            <div>Progress</div>
            <Collapse IsAccordion="true">
                <CollapseItems>
                    <CollapseItem Text="Lesson - Practice" IsCollapsed="false">
                        <ProgressTable Type="@TrainingType.Course" />
                    </CollapseItem>
                    <CollapseItem Text="Test">
                        <ProgressTable Type="@TrainingType.AllKeysTest" />
                    </CollapseItem>
                </CollapseItems>
            </Collapse>
        </TabItem>
        <TabItem Text="Speed">
            <div>Speed</div>
            <ReportChart IsSetTitle="true" IsStacked="false" Title="Speed" XTitle="Keys" YTitle="Speed (WPM)"
                Xlabels="@_keys" Data="@GetSpeedData()"></ReportChart>
        </TabItem>
        <TabItem Text="Accuracy">
            <div>Accuracy</div>
            <ReportChart IsSetTitle="true" IsStacked="false" Title="Accuracy" XTitle="Keys" YTitle="Accuracy"
                Xlabels="@_keys" Data="@GetAccuracyData()"></ReportChart>
        </TabItem>
    </Tab>
</RequireAuthentication>

@code {
    [Parameter] public int AccountId { get; set; } = 1;

    private Chart _barChart;
    private IEnumerable<string>? _keys;
    private Dictionary<string, IEnumerable<double>>? _keyStats;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.IsLoggedIn)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        if (AppState?.CurrentAccount?.History == null)
        {
            return;
        }

        _keys ??= await ReportService.GetKeyLabels(AppState.CurrentAccount.History);
        _keyStats ??= await ReportService.GetKeyStats(AppState.CurrentAccount.History, false);
    }

    private List<ChartDataset> GetSpeedData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
{
new() { Label = "Average Press Duration", Data = _keyStats["typeSpeed"].Select(v => Math.Round(v, 1)).Cast<object>() },
new() { Label = "Average Latency", Data = _keyStats["latency"].Select(v => Math.Round(v, 1)).Cast<object>() }
};

        return data;
    }

    private List<ChartDataset> GetAccuracyData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
{
new()
{
Label = "Overall Accuracy", Data = _keyStats["accuracy"].Select(v => Math.Round(v, 1)).Cast<object>()
}
};

        return data;
    }
}