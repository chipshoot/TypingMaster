@page "/reports"

@inject ApplicationContext Context
@inject IReportWebService ReportService

<style>
    .header-cell {
    align-items: center;
    text-align: center;
    word-break: break-all;
    }
</style>
<RequireAuthentication ShowMessage="true">
    <Tab IsCard="true">
        <TabItem Text="Progress" CssClass="progress-table">
            <div>Progress</div>
            <Collapse IsAccordion="true">
                <CollapseItems>
                    <CollapseItem Text="Lesson - Practice" IsCollapsed="false">
                        <ProgressTable Items="@_courseProgress" />
                    </CollapseItem>
                    <CollapseItem Text="Test">
                        <ProgressTable Items="@_testProgress" />
                    </CollapseItem>
                </CollapseItems>
            </Collapse>
        </TabItem>
        <TabItem Text="Speed">
            <div>Speed</div>
            <ReportChart IsSetTitle="true" IsStacked="false" Title="Speed" XTitle="Keys" YTitle="Speed (WPM)"
            Xlabels="@_keys" Data="@GetSpeedData()"></ReportChart>
        </TabItem>
        <TabItem Text="Accuracy">
            <div>Accuracy</div>
            <ReportChart IsSetTitle="true" IsStacked="false" Title="Accuracy" XTitle="Keys" YTitle="Accuracy"
            Xlabels="@_keys" Data="@GetAccuracyData()"></ReportChart>
        </TabItem>
    </Tab>
</RequireAuthentication>

@code {

    [Parameter] public int AccountId { get; set; } = 1;

    private Chart _barChart;
    private IEnumerable<string>? _keys;
    private Dictionary<string, IEnumerable<double>>? _keyStats;
    private List<ProgressRecord> _courseProgress = new();
    private List<ProgressRecord> _testProgress = new();

    protected override async Task OnInitializedAsync()
    {
        if (Context?.CurrentAccount?.History == null)
        {
            return;
        }

        _keys ??= await ReportService.GetKeyLabels(Context.CurrentAccount.History);
        _keyStats ??= await ReportService.GetKeyStats(Context.CurrentAccount.History, false);

        _courseProgress = (await ReportService.GetProgressRecords(
            Context.CurrentAccount.History,
            Context.CurrentCourse,
            TrainingType.Course)).ToList();

        _testProgress = (await ReportService.GetProgressRecords(
            Context.CurrentAccount.History,
            Context.CurrentCourse,
            TrainingType.AllKeysTest)).ToList();
    }

    private List<ChartDataset> GetSpeedData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
        {
            new() { Label = "Average Press Duration", Data = _keyStats["typeSpeed"].Select(v => Math.Round(v, 1)).Cast<object>() },
            new() { Label = "Average Latency", Data = _keyStats["latency"].Select(v => Math.Round(v, 1)).Cast<object>() }
        };

        return data;
    }

    private List<ChartDataset> GetAccuracyData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
        {
            new()
            {
                Label = "Overall Accuracy", Data = _keyStats["accuracy"].Select(v => Math.Round(v, 1)).Cast<object>()
            }
        };

        return data;
    }
}