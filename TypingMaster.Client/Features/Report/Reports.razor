@page "/reports"

@inject TypingTrainerContext Context
@inject IReportService ReportService
@inject NavigationManager Navigation

<style>
    .header-cell {
    align-items: center;
    text-align: center;
    word-break: break-all;
    }
</style>
<Tab IsCard="true">
    <TabItem Text="Progress" CssClass="progress-table">
        <div>Progress</div>
        <Collapse IsAccordion="true">
            <CollapseItems>
                <CollapseItem Text="Lesson - Practice" IsCollapsed="false">
                    <Table TItem="ProgressItem" Items="@GetItems()" HeaderStyle="TableHeaderStyle.Light" IsBordered="true" IsStriped="true">
                        <MultiHeaderTemplate>
                            <tr>
                                <th rowspan="2" style="vertical-align:bottom;"><div class="header-cell">Type</div></th>
                                <th rowspan="2" style="vertical-align:bottom;"><div class="header-cell header-multi-row">Name</div></th>
                                <th rowspan="2" style="vertical-align:bottom;"><div class="header-cell header-multi-row">Keys above 20 WPM</div></th>
                                <th rowspan="2" style="vertical-align:bottom;"><div class="header-cell header-multi-row">Date</div></th>
                                <th colspan="2"><div class="header-cell">Overall</div></th>
                                <th colspan="3"><div class="header-cell">Speed Breakdown</div></th>
                            </tr>
                            <tr>
                                <th><div class="header-cell">Accuracy</div></th>
                                <th><div class="header-cell">Speed</div></th>
                                <th><div class="header-cell">Letter</div></th>
                                <th><div class="header-cell">Number</div></th>
                                <th><div class="header-cell">Symbol</div></th>
                            </tr>
                        </MultiHeaderTemplate>
                        <TableColumns>
                            <TableColumn @bind-Field="@context.Type"></TableColumn>
                            <TableColumn @bind-Field="@context.Name"></TableColumn>
                            <TableColumn @bind-Field="@context.GoodWpmKeys"></TableColumn>
                            <TableColumn @bind-Field="@context.Date"></TableColumn>
                            <TableColumn @bind-Field="@context.OverallAccuracy"></TableColumn>
                            <TableColumn @bind-Field="@context.OverallSpeed"></TableColumn>
                            <TableColumn @bind-Field="@context.BreakdownLetter"></TableColumn>
                            <TableColumn @bind-Field="@context.BreakdownNumber"></TableColumn>
                            <TableColumn @bind-Field="@context.BreakdownSymbol"></TableColumn>
                        </TableColumns>
                    </Table>
                </CollapseItem>
                <CollapseItem Text="Test">

                </CollapseItem>
            </CollapseItems>
        </Collapse>
    </TabItem>
    <TabItem Text="Speed">
        <div>Speed</div>
        <ReportChart IsSetTitle="true" IsStacked="false" Title="Speed" XTitle="Keys" YTitle="Speed (WPM)"
        Xlabels="@_keys" Data="@GetSpeedData()"></ReportChart>
    </TabItem>
    <TabItem Text="Accuracy">
        <div>Accuracy</div>
        <ReportChart IsSetTitle="true" IsStacked="false" Title="Accuracy" XTitle="Keys" YTitle="Accuracy"
        Xlabels="@_keys" Data="@GetAccuracyData()"></ReportChart>
    </TabItem>
</Tab>

@code {



    [Parameter] public int AccountId { get; set; } = 1;
    private Chart _barChart;
    private IEnumerable<string>? _keys;
    private Dictionary<string, IEnumerable<double>>? _keyStats;

    protected override void OnInitialized()
    {
        if (Context?.CurrentAccount?.History == null)
        {
            return;
        }

        _keys ??= ReportService.GetKeyLabels(Context.CurrentAccount.History);
        _keyStats ??= ReportService.GetKeyStats(Context.CurrentAccount.History, false);
    }

    private List<ChartDataset> GetSpeedData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
        {
            new() { Label = "Average Press Duration", Data = _keyStats["typeSpeed"].Select(v => Math.Round(v, 1)).Cast<object>() },
            new() { Label = "Average Latency", Data = _keyStats["latency"].Select(v => Math.Round(v, 1)).Cast<object>() }
        };

        return data;
    }

    private List<ChartDataset> GetAccuracyData()
    {
        if (_keyStats == null)
        {
            return [];
        }

        var data = new List<ChartDataset>
        {
            new()
            {
                Label = "Overall Accuracy", Data = _keyStats["accuracy"].Select(v => Math.Round(v, 1)).Cast<object>()
            }
        };

        return data;
    }

    private List<ProgressItem> GetItems()
    {
        return
        [
            new ProgressItem
            {
                Type = "Practice",
                Name = "Base class",
                Date = DateTime.Now.ToString(),
                GoodWpmKeys = 21,
                OverallAccuracy = 82,
                OverallSpeed = 56,
                BreakdownLetter = 60,
                BreakdownNumber = 0,
                BreakdownSymbol = 0
            }
        ];

    }

    private class ProgressItem
    {
        public string Type { get; set; } = null!;
        public string Name { get; set; } = null!;
        public string Date { get; set; } = null!;
        public int GoodWpmKeys { get; set; }
        public double OverallAccuracy { get; set; }
        public double OverallSpeed { get; set; }
        public int BreakdownLetter { get; set; }
        public int BreakdownNumber { get; set; }
        public int BreakdownSymbol { get; set; }

    }
}